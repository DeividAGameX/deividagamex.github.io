---
import {ViewTransitions} from "astro:transitions";
import "../styles/global.css";
import "../styles/iconmoon.css"

interface Props {
    title: string;
}

const {title} = Astro.props;
---

<!doctype html>
<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
        />
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
            rel="stylesheet"
        />
        <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/devicon.min.css"
        />
        <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css"
        />
        <ViewTransitions />
    </head>
    <body class="bg-gray-950 text-white">
        <div id="app" class="min-h-screen">
            <slot />
        </div>
        <script>
            // Script para manejar el cambio de color primario
            document.addEventListener("DOMContentLoaded", () => {
                const colorPicker = document.getElementById("color-picker");
                const root = document.documentElement;

                if (colorPicker) {
                    colorPicker.addEventListener("change", (e) => {
                        const color = e.target.value;
                        root.style.setProperty("--color-primary", color);
                        localStorage.setItem("primaryColor", color);
                    });

                    // Cargar color guardado
                    const savedColor = localStorage.getItem("primaryColor");
                    if (savedColor) {
                        root.style.setProperty("--color-primary", savedColor);
                        colorPicker.value = savedColor;
                    }
                }

                // Añadir animación de carga para proyectos de GitHub
                const projectsSection = document.getElementById("proyectos");
                if (projectsSection) {
                    const projectCards =
                        projectsSection.querySelectorAll(".grid > div");
                    projectCards.forEach((card, index) => {
                        setTimeout(() => {
                            card.classList.add("opacity-100");
                            card.classList.remove("opacity-0", "translate-y-4");
                        }, 100 * index);
                    });
                }
            });
        </script>
    </body>
</html>
